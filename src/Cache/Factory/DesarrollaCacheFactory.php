<?php/** * The MIT License (MIT) * * Copyright (c) 2015 Krishnaprasad MG <sunspikes@gmail.com> * * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE * SOFTWARE. */namespace Sunspikes\Ratelimit\Cache\Factory;use Desarrolla2\Cache\Adapter\Apc;use Desarrolla2\Cache\Adapter\File;use Desarrolla2\Cache\Adapter\MemCache;use Desarrolla2\Cache\Adapter\Memory;use Desarrolla2\Cache\Adapter\Mongo;use Desarrolla2\Cache\Adapter\MySQL;use Desarrolla2\Cache\Adapter\NotCache;use Desarrolla2\Cache\Adapter\Redis;use Desarrolla2\Cache\Cache;use Sunspikes\Ratelimit\Cache\Exception\DriverNotFoundException;use Sunspikes\Ratelimit\Cache\Exception\InvalidConfigException;class DesarrollaCacheFactory implements FactoryInterface{    /* @const DEFAULT_TTL */    const DEFAULT_TTL = 3600;    /* @const DEFAULT_LIMIT */    const DEFAULT_LIMIT = 1000;    /**     * @inheritdoc     */    public function make($config)    {        $driver = $this->getDriver($config);        return new Cache($driver);    }    /**     * Make the driver based on given config     *     * @param array $config     *     * @return mixed     * @throws DriverNotFoundException     * @throws InvalidConfigException     */    private function getDriver($config)    {        $driver = $config['driver'];        if (is_null($driver)) {            throw new InvalidConfigException('Cache driver is not defined in configuration.');        }        $driverCreateMethod = 'create' . ucfirst($driver) . 'Driver';        if (method_exists($this, $driverCreateMethod)) {            $driver = new $this->{$driverCreateMethod}($config[$driver]);            $driver->setOption('ttl',                $config['default_ttl']                    ?: static::DEFAULT_TTL            );            return $driver;        }        throw new DriverNotFoundException('Cannot find the driver ' . $driver . ' for Desarrolla');    }    /**     * Create NotCache driver     *     * @param array $config     *     * @return NotCache     */    private function createNotcacheDriver($config)    {        return new NotCache();    }    /**     * Create File driver     *     * @param array $config     *     * @return File     */    private function createFileDriver($config)    {        return new File($config['cache_dir']);    }    /**     * Create APC driver     *     * @param array $config     *     * @return Apc     */    private function createApcDriver($config)    {        return new Apc();    }    /**     * Create Memory driver     *     * @param array $config     *     * @return Memory     * @throws \Desarrolla2\Cache\Adapter\MemoryCacheException     */    private function createMemoryDriver($config)    {        $memory = new Memory();        $memory->setOption('limit',            $config['limit']                ?: static::DEFAULT_LIMIT        );        return $memory;    }    /**     * Create Mongo driver     *     * @param array $config     *     * @return Mongo     */    private function createMongoDriver($config)    {        return new Mongo($config['server']);    }    /**     * Create MySQL driver     *     * @param array $config     *     * @return MySQL     */    private function createMysqlDriver($config)    {        return new MySQL($config['host'], $config['username'], $config['password'], $config['port']);    }    /**     * Create Redis driver     *     * @param array $config     *     * @return Redis     */    private function createRedisDriver($config)    {        return new Redis();    }    /**     * Create MemCache driver     *     * @param array $config     *     * @return MemCache     */    private function createMemcacheDriver($config)    {        return new MemCache();    }}