<?phpnamespace Sunspikes\Ratelimit\Cache\Factory;use Desarrolla2\Cache\Adapter\Apc;use Desarrolla2\Cache\Adapter\File;use Desarrolla2\Cache\Adapter\MemCache;use Desarrolla2\Cache\Adapter\Memory;use Desarrolla2\Cache\Adapter\Mongo;use Desarrolla2\Cache\Adapter\MySQL;use Desarrolla2\Cache\Adapter\NotCache;use Desarrolla2\Cache\Adapter\Redis;use Desarrolla2\Cache\Cache;use Sunspikes\Ratelimit\Cache\Exception\DriverNotFoundException;class DesarrollaCacheFactory implements FactoryContract{    const DEFAULT_TTL = 3600;    const DEFAULT_LIMIT = 1000;    public function make($config)    {        $driver = $this->getDriver($config);        return new Cache($driver);    }    private function getDriver($config)    {        $driver = $config['driver'];        if (is_null($driver)) {            throw new \InvalidConfigException('Cache driver is not defined in configuration.');        }        $driverCreateMethod = 'create'. ucfirst($driver) .'Driver';        if (method_exists($this, $driverCreateMethod)) {            $driver = new $this->{$driverCreateMethod}($config[$driver]);            $driver->setOption('ttl', $config['default_ttl']?:DEFAULT_TTL);            return $driver;        }        throw new DriverNotFoundException('Cannot find the driver '. $driver . ' for Desarrolla');    }    private function createNotcacheDriver($config)    {        return new NotCache();    }    private function createFileDriver($config)    {        return new File($config['cache_dir']);    }    private function createApcDriver($config)    {        return new Apc();    }    private function createMemoryDriver($config)    {        $memory = new Memory();        $memory->setOption('limit', $config['limit']?:DEFAULT_LIMIT);        return $memory;    }    private function createMongoDriver($config)    {        return new Mongo($config['server']);    }    private function createMysqlDriver($config)    {        return new MySQL($config['host'], $config['username'], $config['password'], $config['port']);    }    private function createRedisDriver($config)    {        return new Redis();    }    private function createMemcacheDriver($config)    {        return new MemCache();    }}